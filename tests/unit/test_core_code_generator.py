"""
Tests for core.code_generator
====================

Generated by Autonomous Agent
Timestamp: 2025-08-05T06:23:31.243902
"""

import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from core.code_generator import CodeGenerator, CodeGeneratorConfig, create_codegenerator


class TestCodeGenerator:
    """Test cases for {class_name}."""
    
    def setup_method(self):
        """Setup for each test method."""
        self.config = CodeGeneratorConfig()
        self.component = CodeGenerator(self.config)
    
    def teardown_method(self):
        """Teardown for each test method."""
        if hasattr(self, 'component'):
            self.component.cleanup()
    
    def test_initialization(self):
        """Test component initialization."""
        assert self.component.initialize() is True
        assert self.component._initialized is True
    
    def test_execution_without_initialization(self):
        """Test that execution fails without initialization."""
        try:
            self.component.execute()
            assert False, "Should have raised RuntimeError"
        except RuntimeError as e:
            assert "not initialized" in str(e)
    
    def test_execution_success(self):
        """Test successful execution."""
        self.component.initialize()
        result = self.component.execute()
        
        assert result["status"] == "success"
        assert "timestamp" in result
        assert "cycle" in result
        assert "data" in result
    
    def test_factory_function(self):
        """Test the factory function."""
        component = create_codegenerator()
        assert isinstance(component, CodeGenerator)
        assert component.config is not None
    
    def test_config_defaults(self):
        """Test configuration defaults."""
        config = CodeGeneratorConfig()
        assert config.enabled is True
        assert config.max_retries == 3
        assert config.timeout == 30.0


if __name__ == "__main__":
    # Simple test runner
    test_instance = TestCodeGenerator()
    test_instance.setup_method()
    
    print("Running tests...")
    test_instance.test_initialization()
    test_instance.test_execution_without_initialization()
    test_instance.test_execution_success()
    test_instance.test_factory_function()
    test_instance.test_config_defaults()
    
    test_instance.teardown_method()
    print("All tests passed!")
