# Autonomous Codebase Generation System Makefile
# Generated by Autonomous Agent v1.0

.PHONY: help install test lint format clean build run dev docker-build docker-run docker-stop docker-clean docs security performance monitoring deploy production development validate

# Default target
.DEFAULT_GOAL := help

# Variables
PYTHON := python3
PIP := pip3
PYTEST := pytest
BLACK := black
FLAKE8 := flake8
MYPY := mypy
BANDIT := bandit
SAFETY := safety
DOCKER := docker
DOCKER_COMPOSE := docker-compose
PROJECT_NAME := autonomous-codebase-generator
VERSION := 1.0.0

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[0;37m
RESET := \033[0m

help: ## Show this help message
	@echo "$(CYAN)Autonomous Codebase Generation System$(RESET)"
	@echo "$(YELLOW)Available commands:$(RESET)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Installation and Setup
install: ## Install all dependencies
	@echo "$(BLUE)Installing Python dependencies...$(RESET)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	@echo "$(GREEN)Dependencies installed successfully!$(RESET)"

install-dev: ## Install development dependencies
	@echo "$(BLUE)Installing development dependencies...$(RESET)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	$(PIP) install black flake8 mypy bandit safety pytest pytest-cov pytest-asyncio pytest-mock
	@echo "$(GREEN)Development dependencies installed successfully!$(RESET)"

setup: ## Initial setup of the project
	@echo "$(BLUE)Setting up autonomous codebase generation system...$(RESET)"
	mkdir -p logs temp build dist reports profiles models data
	mkdir -p src/{core,api,utils,ml} tests/{unit,integration,performance} docs/{api,architecture}
	mkdir -p configs/{grafana,nginx} scripts
	@echo "$(GREEN)Project structure created successfully!$(RESET)"

# Testing
test: ## Run all tests
	@echo "$(BLUE)Running tests...$(RESET)"
	$(PYTEST) tests/ -v --cov=src --cov-report=html --cov-report=term-missing

test-unit: ## Run unit tests only
	@echo "$(BLUE)Running unit tests...$(RESET)"
	$(PYTEST) tests/unit/ -v

test-integration: ## Run integration tests only
	@echo "$(BLUE)Running integration tests...$(RESET)"
	$(PYTEST) tests/integration/ -v

test-performance: ## Run performance tests
	@echo "$(BLUE)Running performance tests...$(RESET)"
	$(PYTEST) tests/performance/ -v --benchmark-only

test-coverage: ## Run tests with coverage report
	@echo "$(BLUE)Running tests with coverage...$(RESET)"
	$(PYTEST) tests/ -v --cov=src --cov-report=html --cov-report=term-missing --cov-fail-under=95

# Code Quality
lint: ## Run linting checks
	@echo "$(BLUE)Running linting checks...$(RESET)"
	$(FLAKE8) src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

format: ## Format code with black
	@echo "$(BLUE)Formatting code...$(RESET)"
	$(BLACK) src/ tests/ --line-length=88

format-check: ## Check code formatting
	@echo "$(BLUE)Checking code formatting...$(RESET)"
	$(BLACK) src/ tests/ --check --line-length=88

type-check: ## Run type checking
	@echo "$(BLUE)Running type checking...$(RESET)"
	$(MYPY) src/ --ignore-missing-imports --disallow-untyped-defs

security: ## Run security scans
	@echo "$(BLUE)Running security scans...$(RESET)"
	$(BANDIT) -r src/ -f json -o reports/bandit-report.json
	$(SAFETY) check --json --output reports/safety-report.json
	@echo "$(GREEN)Security scan completed!$(RESET)"

quality: format lint type-check security ## Run all code quality checks

.PHONY: validate
validate: ## Trigger the GitHub Actions validation workflow via gh
	gh workflow run ci.yml --ref $$(git rev-parse HEAD)
	gh pr checks --watch

# Autonomous Agent
run: ## Run the autonomous agent
	@echo "$(BLUE)Starting autonomous agent...$(RESET)"
	$(PYTHON) autonomous_agent.py

run-dev: ## Run in development mode
	@echo "$(BLUE)Starting autonomous agent in development mode...$(RESET)"
	$(PYTHON) autonomous_agent.py --mode development --cycles 5

run-prod: ## Run in production mode
	@echo "$(BLUE)Starting autonomous agent in production mode...$(RESET)"
	$(PYTHON) autonomous_agent.py --mode production --infinite

run-custom: ## Run with custom configuration
	@echo "$(BLUE)Starting autonomous agent with custom config...$(RESET)"
	$(PYTHON) scripts/run_autonomous_agent.py --help

# Docker Commands
docker-build: ## Build Docker images
	@echo "$(BLUE)Building Docker images...$(RESET)"
	$(DOCKER) build -t $(PROJECT_NAME):latest .
	$(DOCKER) build -t $(PROJECT_NAME):dev --target development .
	$(DOCKER) build -t $(PROJECT_NAME):test --target testing .

docker-run: ## Run with Docker Compose
	@echo "$(BLUE)Starting services with Docker Compose...$(RESET)"
	$(DOCKER_COMPOSE) up -d

docker-run-dev: ## Run development environment
	@echo "$(BLUE)Starting development environment...$(RESET)"
	$(DOCKER_COMPOSE) --profile dev up -d

docker-run-prod: ## Run production environment
	@echo "$(BLUE)Starting production environment...$(RESET)"
	$(DOCKER_COMPOSE) --profile production up -d

docker-stop: ## Stop Docker services
	@echo "$(BLUE)Stopping Docker services...$(RESET)"
	$(DOCKER_COMPOSE) down

docker-clean: ## Clean Docker resources
	@echo "$(BLUE)Cleaning Docker resources...$(RESET)"
	$(DOCKER_COMPOSE) down -v --rmi all
	$(DOCKER) system prune -f

docker-logs: ## Show Docker logs
	@echo "$(BLUE)Showing Docker logs...$(RESET)"
	$(DOCKER_COMPOSE) logs -f

# Documentation
docs: ## Generate documentation
	@echo "$(BLUE)Generating documentation...$(RESET)"
	$(PYTHON) scripts/generate_docs.py

docs-api: ## Generate API documentation
	@echo "$(BLUE)Generating API documentation...$(RESET)"
	sphinx-apidoc -o docs/api src/ -f
	sphinx-build -b html docs/ docs/_build/html

docs-serve: ## Serve documentation locally
	@echo "$(BLUE)Serving documentation...$(RESET)"
	cd docs/_build/html && python -m http.server 8080

# Performance and Monitoring
performance: ## Run performance profiling
	@echo "$(BLUE)Running performance profiling...$(RESET)"
	$(PYTHON) scripts/performance_profiler.py

monitoring: ## Start monitoring services
	@echo "$(BLUE)Starting monitoring services...$(RESET)"
	$(DOCKER_COMPOSE) --profile monitoring up -d

monitoring-stop: ## Stop monitoring services
	@echo "$(BLUE)Stopping monitoring services...$(RESET)"
	$(DOCKER_COMPOSE) --profile monitoring down

# Deployment
deploy: ## Deploy to production
	@echo "$(BLUE)Deploying to production...$(RESET)"
	$(PYTHON) scripts/deploy.py --environment production

deploy-staging: ## Deploy to staging
	@echo "$(BLUE)Deploying to staging...$(RESET)"
	$(PYTHON) scripts/deploy.py --environment staging

# CI/CD
ci: test quality security ## Run CI pipeline locally

ci-full: setup install-dev test quality security docs ## Run full CI pipeline

# Development Workflow
dev: install-dev setup ## Setup development environment

dev-run: dev run-dev ## Setup and run in development mode

# Production Workflow
prod: install setup ## Setup production environment

prod-run: prod run-prod ## Setup and run in production mode

# Cleanup
clean: ## Clean build artifacts
	@echo "$(BLUE)Cleaning build artifacts...$(RESET)"
	rm -rf build/ dist/ *.egg-info/
	find . -type d -name __pycache__ -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete

clean-logs: ## Clean log files
	@echo "$(BLUE)Cleaning log files...$(RESET)"
	rm -rf logs/*.log

clean-reports: ## Clean report files
	@echo "$(BLUE)Cleaning report files...$(RESET)"
	rm -rf reports/*.json reports/*.html

clean-all: clean clean-logs clean-reports ## Clean everything

# Utility Commands
status: ## Show system status
	@echo "$(BLUE)System Status:$(RESET)"
	@echo "  Python: $(shell $(PYTHON) --version)"
	@echo "  Pip: $(shell $(PIP) --version)"
	@echo "  Docker: $(shell $(DOCKER) --version)"
	@echo "  Docker Compose: $(shell $(DOCKER_COMPOSE) --version)"

version: ## Show version information
	@echo "$(CYAN)Autonomous Codebase Generation System v$(VERSION)$(RESET)"

info: ## Show project information
	@echo "$(CYAN)Project Information:$(RESET)"
	@echo "  Name: $(PROJECT_NAME)"
	@echo "  Version: $(VERSION)"
	@echo "  Python: $(shell $(PYTHON) --version)"
	@echo "  Dependencies: $(shell wc -l < requirements.txt) packages"

# Git Commands
git-init: ## Initialize git repository
	@echo "$(BLUE)Initializing git repository...$(RESET)"
	git init
	git add .
	git commit -m "Initial commit: Autonomous Codebase Generation System"

git-status: ## Show git status
	@echo "$(BLUE)Git Status:$(RESET)"
	git status

git-commit: ## Commit changes
	@echo "$(BLUE)Committing changes...$(RESET)"
	git add .
	git commit -m "feat: autonomous codebase generation update"

git-push: ## Push changes
	@echo "$(BLUE)Pushing changes...$(RESET)"
	git push

# Backup and Restore
backup: ## Create backup
	@echo "$(BLUE)Creating backup...$(RESET)"
	tar -czf backup-$(shell date +%Y%m%d-%H%M%S).tar.gz src/ tests/ docs/ configs/ scripts/

restore: ## Restore from backup
	@echo "$(BLUE)Restoring from backup...$(RESET)"
	@read -p "Enter backup file name: " backup_file; \
	tar -xzf $$backup_file

# Health Checks
health: ## Run health checks
	@echo "$(BLUE)Running health checks...$(RESET)"
	$(PYTHON) scripts/health_check.py

health-docker: ## Run Docker health checks
	@echo "$(BLUE)Running Docker health checks...$(RESET)"
	$(DOCKER_COMPOSE) ps

# Emergency Commands
emergency-stop: ## Emergency stop all services
	@echo "$(RED)EMERGENCY STOP - Stopping all services...$(RESET)"
	$(DOCKER_COMPOSE) down --remove-orphans
	pkill -f autonomous_agent.py || true

emergency-clean: ## Emergency cleanup
	@echo "$(RED)EMERGENCY CLEANUP - Cleaning all resources...$(RESET)"
	$(DOCKER_COMPOSE) down -v --rmi all --remove-orphans
	$(DOCKER) system prune -af
	rm -rf logs/* temp/* build/* dist/*

# Development Tools
jupyter: ## Start Jupyter notebook
	@echo "$(BLUE)Starting Jupyter notebook...$(RESET)"
	jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root

notebook: jupyter ## Alias for jupyter

# Machine Learning
ml-train: ## Train ML models
	@echo "$(BLUE)Training ML models...$(RESET)"
	$(PYTHON) scripts/ml_training.py

ml-predict: ## Run ML predictions
	@echo "$(BLUE)Running ML predictions...$(RESET)"
	$(PYTHON) scripts/ml_inference.py

# API Development
api-serve: ## Serve API locally
	@echo "$(BLUE)Serving API locally...$(RESET)"
	uvicorn src.api.main:app --reload --host 0.0.0.0 --port 8000

api-test: ## Test API endpoints
	@echo "$(BLUE)Testing API endpoints...$(RESET)"
	$(PYTHON) scripts/api_test.py

# Database
db-init: ## Initialize database
	@echo "$(BLUE)Initializing database...$(RESET)"
	$(PYTHON) scripts/init_database.py

db-migrate: ## Run database migrations
	@echo "$(BLUE)Running database migrations...$(RESET)"
	alembic upgrade head

db-seed: ## Seed database with test data
	@echo "$(BLUE)Seeding database...$(RESET)"
	$(PYTHON) scripts/seed_database.py

# Show all available commands
commands: ## Show all available commands
	@echo "$(CYAN)All available commands:$(RESET)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort

# Default development workflow
all: setup install-dev test quality docs ## Complete development workflow

# Default production workflow
production: setup install test quality security docs deploy ## Complete production workflow