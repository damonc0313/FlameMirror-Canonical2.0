"""GraphformicCoder Codex integration stubs."""

from __future__ import annotations

import os
from dataclasses import dataclass, field
from hashlib import sha256
from typing import List, Optional


@dataclass
class CodexBackend:
    """Runtime configuration for the Codex API bridge."""

    endpoint: str = "https://api.openai.com/v1/codex"
    api_key: Optional[str] = None
    enabled: bool = False

    def __post_init__(self) -> None:
        if self.api_key is None:
            self.api_key = os.getenv("CODEX_API_KEY")
        if self.api_key:
            self.enabled = True

    def invoke(self, prompt: str, ast: Optional[str]) -> str:
        if not self.enabled or not self.api_key:
            raise RuntimeError("Codex backend is not configured")
        digest = sha256(f"{prompt}|{ast}".encode("utf-8")).hexdigest()[:10]
        summary = prompt.splitlines()[0] if prompt else ""
        return (
            f"def codex_solution_{digest}():\n"
            f"    \"\"\"{summary[:60]}\"\"\"\n"
            f"    return '{digest}'\n"
        )


@dataclass
class GraphformicCoder:
    """Lightweight facade over the Codex backend."""

    backend: Optional[CodexBackend] = None
    history: List[str] = field(default_factory=list)

    def attach_backend(self, backend: CodexBackend) -> None:
        self.backend = backend

    def generate(self, prompt: str, ast: Optional[str] = None) -> str:
        self.history.append(prompt)
        if self.backend and self.backend.enabled:
            return self.backend.invoke(prompt, ast)
        return self._local_synthesis(prompt, ast)

    def _local_synthesis(self, prompt: str, ast: Optional[str]) -> str:
        digest = sha256(prompt.encode("utf-8")).hexdigest()[:8]
        function_name = f"local_solution_{digest}"
        ast_comment = f"# AST hint: {ast[:40]}\n" if ast else ""
        return (
            f"# GraphformicCoder offline synthesis\n"
            f"{ast_comment}def {function_name}():\n"
            f"    \"\"\"Autogenerated from prompt digest {digest}.\"\"\"\n"
            f"    return '{digest}'\n"
        )
