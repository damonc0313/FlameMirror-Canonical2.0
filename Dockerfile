# Multi-stage Dockerfile for Autonomous Codebase Generation System
# Generated by Autonomous Agent v1.0

# Stage 1: Base image with system dependencies
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    build-essential \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash autonomous && \
    mkdir -p /app && \
    chown autonomous:autonomous /app

# Stage 2: Dependencies
FROM base as dependencies

# Set working directory
WORKDIR /app

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies
RUN pip install --upgrade pip && \
    pip install -r requirements.txt

# Stage 3: Development environment
FROM dependencies as development

# Install development dependencies
RUN pip install \
    black \
    flake8 \
    mypy \
    bandit \
    safety \
    pytest \
    pytest-cov \
    pytest-asyncio \
    pytest-mock \
    radon \
    mccabe

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Expose port for development server
EXPOSE 8000

# Development command
CMD ["python", "autonomous_agent.py", "--dev"]

# Stage 4: Production build
FROM dependencies as production

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Create necessary directories
RUN mkdir -p /app/logs /app/temp /app/build /app/dist

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

# Production command
CMD ["python", "autonomous_agent.py", "--production"]

# Stage 5: Testing environment
FROM dependencies as testing

# Install testing dependencies
RUN pip install \
    pytest \
    pytest-cov \
    pytest-asyncio \
    pytest-mock \
    pytest-httpx \
    pytest-benchmark \
    coverage

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Testing command
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=src", "--cov-report=html"]

# Stage 6: Documentation generation
FROM dependencies as documentation

# Install documentation dependencies
RUN pip install \
    sphinx \
    sphinx-rtd-theme \
    myst-parser \
    sphinx-autodoc-typehints

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Documentation generation command
CMD ["sphinx-build", "-b", "html", "docs/", "docs/_build/html"]

# Stage 7: Security scanning
FROM dependencies as security

# Install security tools
RUN pip install \
    bandit \
    safety \
    semgrep

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Security scanning command
CMD ["bandit", "-r", "src/", "-f", "json", "-o", "bandit-report.json"]

# Stage 8: Performance profiling
FROM dependencies as profiling

# Install profiling tools
RUN pip install \
    py-spy \
    memory-profiler \
    line-profiler \
    psutil

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Performance profiling command
CMD ["python", "scripts/performance_profiler.py"]

# Stage 9: Machine learning training
FROM dependencies as ml-training

# Install ML dependencies
RUN pip install \
    tensorflow \
    torch \
    scikit-learn \
    numpy \
    pandas \
    matplotlib \
    seaborn \
    jupyter

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# ML training command
CMD ["python", "scripts/ml_training.py"]

# Stage 10: API server
FROM dependencies as api-server

# Install API dependencies
RUN pip install \
    fastapi \
    uvicorn[standard] \
    gunicorn

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Expose API port
EXPOSE 8000

# API server command
CMD ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]

# Stage 11: Monitoring
FROM dependencies as monitoring

# Install monitoring dependencies
RUN pip install \
    prometheus-client \
    structlog \
    sentry-sdk \
    psutil

# Copy source code
COPY . .

# Set ownership
RUN chown -R autonomous:autonomous /app

# Switch to non-root user
USER autonomous

# Expose monitoring port
EXPOSE 9090

# Monitoring command
CMD ["python", "scripts/monitoring.py"]

# Stage 12: Final production image
FROM production as final

# Add labels
LABEL maintainer="Autonomous Agent <autonomous-agent@github.com>"
LABEL version="1.0.0"
LABEL description="Autonomous Codebase Generation System"
LABEL org.opencontainers.image.source="https://github.com/autonomous-agent/codebase-generator"

# Add metadata
ARG BUILD_DATE
ARG VCS_REF
LABEL org.opencontainers.image.created=$BUILD_DATE
LABEL org.opencontainers.image.revision=$VCS_REF

# Final production command
CMD ["python", "autonomous_agent.py", "--production", "--infinite"]